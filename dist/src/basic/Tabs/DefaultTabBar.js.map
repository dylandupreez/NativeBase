{"version":3,"sources":["../../../../src/basic/Tabs/DefaultTabBar.js"],"names":["DefaultTabBar","name","page","isTabActive","onPressHandler","tabStyle","activeTabStyle","textStyle","activeTextStyle","tabHeaderStyle","headerContent","props","children","undefined","activeTextColor","inactiveTextColor","textColor","fontWeight","flex","random","variables","context","theme","platformStyle","containerWidth","numberOfTabs","tabs","length","tabUnderlineStyle","position","width","height","backgroundColor","topTabBarActiveBorderColor","bottom","left","scrollValue","interpolate","inputRange","outputRange","tabContainerStyle","map","activeTab","renderTab","goToPage","underlineStyle","propTypes","func","number","array","string","style","contextTypes","object","defaultProps","topTabBarActiveTextColor","topTabBarTextColor","StyledTab"],"mappings":"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","file":"DefaultTabBar.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { StyleSheet, View, Animated, Platform } from \"react-native\";\nimport { connectStyle, StyleProvider } from \"native-base-shoutem-theme\";\nimport mapPropsToStyleNames from \"../../Utils/mapPropsToStyleNames\";\nimport variable from \"./../../theme/variables/platform\";\nimport { TabHeading, Text, TabContainer } from \"./../../index\";\nimport _ from \"lodash\";\n\nimport { ViewPropTypes } from \"../../Utils\";\nimport { Button } from \"./Button\";\n\n/*const DefaultTabBar = createReactClass({\n  propTypes: {\n    goToPage: PropTypes.func,\n    activeTab: PropTypes.number,\n    tabs: PropTypes.array,\n    backgroundColor: PropTypes.string,\n    activeTextColor: PropTypes.string,\n    inactiveTextColor: PropTypes.string,\n    tabStyle: ViewPropTypes.style,\n    renderTab: PropTypes.func,\n    underlineStyle: ViewPropTypes.style,\n    tabContainerStyle: ViewPropTypes.style,\n  },\n  contextTypes: {\n    theme: PropTypes.object,\n  },\n\n  getDefaultProps() {\n    return {\n      activeTextColor: variable.topTabBarActiveTextColor,\n      inactiveTextColor: variable.topTabBarTextColor,\n      backgroundColor: null,\n    };\n  },\n\n  renderTabOption(name, page) {},\n\n  renderTab(\n    name,\n    page,\n    isTabActive,\n    onPressHandler,\n    tabStyle,\n    activeTabStyle,\n    textStyle,\n    activeTextStyle,\n    tabHeaderStyle\n  ) {\n    const headerContent = typeof name !== \"string\" ? name.props.children : undefined;\n    const { activeTextColor, inactiveTextColor } = this.props;\n    const textColor = isTabActive ? activeTextColor : inactiveTextColor;\n    const fontWeight = isTabActive ? \"bold\" : \"normal\";\n    if (typeof name === \"string\") {\n      return (\n        <Button style={{ flex: 1 }} key={name} onPress={() => onPressHandler(page)}>\n          <TabHeading style={isTabActive ? activeTabStyle : tabStyle} active={isTabActive}>\n            <Text style={isTabActive ? activeTextStyle : textStyle}>{name}</Text>\n          </TabHeading>\n        </Button>\n      );\n    } else {\n      return (\n        <Button style={{ flex: 1 }} key={_.random(1.2, 5.2)} onPress={() => onPressHandler(page)}>\n          <TabHeading style={tabHeaderStyle} active={isTabActive}>\n            {headerContent}\n          </TabHeading>\n        </Button>\n      );\n    }\n  },\n\n  render() {\n    const variables = this.context.theme\n      ? this.context.theme[\"@@shoutem.theme/themeStyle\"].variables\n      : variable;\n    const platformStyle = variables.platformStyle;\n    const containerWidth = this.props.containerWidth;\n    const numberOfTabs = this.props.tabs.length;\n    const tabUnderlineStyle = {\n      position: \"absolute\",\n      width: containerWidth / numberOfTabs,\n      height: 4,\n      backgroundColor: variables.topTabBarActiveBorderColor,\n      bottom: 0,\n    };\n\n    const left = this.props.scrollValue.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, containerWidth / numberOfTabs],\n    });\n    return (\n      <TabContainer style={this.props.tabContainerStyle ? this.props.tabContainerStyle : {}}>\n        {this.props.tabs.map((name, page) => {\n          const isTabActive = this.props.activeTab === page;\n          const renderTab = this.props.renderTab || this.renderTab;\n          return renderTab(\n            name,\n            page,\n            isTabActive,\n            this.props.goToPage,\n            this.props.tabStyle[page],\n            this.props.activeTabStyle[page],\n            this.props.textStyle[page],\n            this.props.activeTextStyle[page],\n            this.props.tabHeaderStyle[page]\n          );\n        })}\n        <Animated.View style={[tabUnderlineStyle, { left }, this.props.underlineStyle]} />\n      </TabContainer>\n    );\n  },\n});*/\n\nclass DefaultTabBar extends Component {\n  static propTypes = {\n    goToPage: PropTypes.func,\n    activeTab: PropTypes.number,\n    tabs: PropTypes.array,\n    backgroundColor: PropTypes.string,\n    activeTextColor: PropTypes.string,\n    inactiveTextColor: PropTypes.string,\n    tabStyle: ViewPropTypes.style,\n    renderTab: PropTypes.func,\n    underlineStyle: ViewPropTypes.style,\n    tabContainerStyle: ViewPropTypes.style,\n  }\n  static contextTypes = {\n    theme: PropTypes.object,\n  }\n  static defaultProps = {\n    activeTextColor: variable.topTabBarActiveTextColor,\n    inactiveTextColor: variable.topTabBarTextColor,\n    backgroundColor: null,\n  }\n\n  renderTab(name, page, isTabActive, onPressHandler, tabStyle, activeTabStyle, textStyle, activeTextStyle, tabHeaderStyle) {\n    const headerContent = typeof name !== \"string\" ? name.props.children : undefined;\n    const { activeTextColor, inactiveTextColor } = this.props;\n    const textColor = isTabActive ? activeTextColor : inactiveTextColor;\n    const fontWeight = isTabActive ? \"bold\" : \"normal\";\n    if (typeof name === \"string\") {\n      return (\n        <Button style={{ flex: 1 }} key={name} onPress={() => onPressHandler(page)}>\n          <TabHeading style={isTabActive ? activeTabStyle : tabStyle} active={isTabActive}>\n            <Text style={isTabActive ? activeTextStyle : textStyle}>{name}</Text>\n          </TabHeading>\n        </Button>\n      );\n    } else {\n      return (\n        <Button style={{ flex: 1 }} key={_.random(1.2, 5.2)} onPress={() => onPressHandler(page)}>\n          <TabHeading style={tabHeaderStyle} active={isTabActive}>\n            {headerContent}\n          </TabHeading>\n        </Button>\n      );\n    }\n  }\n\n  render() {\n    const variables = this.context.theme\n      ? this.context.theme[\"@@shoutem.theme/themeStyle\"].variables\n      : variable;\n    const platformStyle = variables.platformStyle;\n    const containerWidth = this.props.containerWidth;\n    const numberOfTabs = this.props.tabs.length;\n    const tabUnderlineStyle = {\n      position: \"absolute\",\n      width: containerWidth / numberOfTabs,\n      height: 4,\n      backgroundColor: variables.topTabBarActiveBorderColor,\n      bottom: 0,\n    };\n\n    const left = this.props.scrollValue.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, containerWidth / numberOfTabs],\n    });\n    return (\n      <TabContainer style={this.props.tabContainerStyle ? this.props.tabContainerStyle : {}}>\n        {this.props.tabs.map((name, page) => {\n          const isTabActive = this.props.activeTab === page;\n          const renderTab = this.props.renderTab || this.renderTab;\n          return renderTab(\n            name,\n            page,\n            isTabActive,\n            this.props.goToPage,\n            this.props.tabStyle[page],\n            this.props.activeTabStyle[page],\n            this.props.textStyle[page],\n            this.props.activeTextStyle[page],\n            this.props.tabHeaderStyle[page]\n          );\n        })}\n        <Animated.View style={[tabUnderlineStyle, { left }, this.props.underlineStyle]} />\n      </TabContainer>\n    );\n  }\n\n}\n\n// module.exports = DefaultTabBar;\nconst StyledTab = connectStyle(\"NativeBase.DefaultTabBar\", {}, mapPropsToStyleNames)(DefaultTabBar);\nexport { StyledTab as DefaultTabBar };\n"]}