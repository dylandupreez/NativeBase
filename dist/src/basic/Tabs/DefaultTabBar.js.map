{"version":3,"sources":["../../../../src/basic/Tabs/DefaultTabBar.js"],"names":["DefaultTabBar","props","name","page","isTabActive","onPressHandler","tabStyle","activeTabStyle","textStyle","activeTextStyle","tabHeaderStyle","headerContent","children","undefined","currTextStyle","currTabStyle","flex","random","variables","context","theme","platformStyle","containerWidth","numberOfTabs","tabs","length","tabUnderlineStyle","position","width","height","backgroundColor","topTabBarActiveBorderColor","bottom","left","scrollValue","interpolate","inputRange","outputRange","tabContainerStyle","map","activeTab","renderTab","goToPage","underlineStyle","propTypes","func","number","array","string","activeTextColor","inactiveTextColor","style","contextTypes","object","defaultProps","topTabBarActiveTextColor","topTabBarTextColor","StyledTab"],"mappings":"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","file":"DefaultTabBar.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { StyleSheet, View, Animated, Platform } from \"react-native\";\nimport { connectStyle, StyleProvider } from \"native-base-shoutem-theme\";\nimport mapPropsToStyleNames from \"../../Utils/mapPropsToStyleNames\";\nimport variable from \"./../../theme/variables/platform\";\nimport { TabHeading, Text, TabContainer } from \"./../../index\";\nimport _ from \"lodash\";\n\nimport { ViewPropTypes } from \"../../Utils\";\nimport { Button } from \"./Button\";\n\nclass DefaultTabBar extends Component {\n    static propTypes = {\n        goToPage: PropTypes.func,\n        activeTab: PropTypes.number,\n        tabs: PropTypes.array,\n        backgroundColor: PropTypes.string,\n        activeTextColor: PropTypes.string,\n        inactiveTextColor: PropTypes.string,\n        tabStyle: ViewPropTypes.style,\n        renderTab: PropTypes.func,\n        underlineStyle: ViewPropTypes.style,\n        tabContainerStyle: ViewPropTypes.style,\n    }\n    static contextTypes = {\n        theme: PropTypes.object,\n    }\n    static defaultProps = {\n        activeTextColor: variable.topTabBarActiveTextColor,\n        inactiveTextColor: variable.topTabBarTextColor,\n        backgroundColor: null,\n    }\n\n    constructor(props) {\n        super(props);\n    }\n\n    renderTab(name, page, isTabActive, onPressHandler, tabStyle, activeTabStyle, textStyle, activeTextStyle, tabHeaderStyle) {\n        const headerContent = typeof name !== \"string\" ? name.props.children : undefined;\n        // const { activeTextColor, inactiveTextColor } = this.props;\n        // const textColor = isTabActive ? activeTextColor : inactiveTextColor;\n        //const fontWeight = isTabActive ? \"bold\" : \"normal\";\n        let currTextStyle = textStyle, currTabStyle = tabStyle;\n        if(isTabActive){\n            currTextStyle = activeTextStyle;\n            currTabStyle = activeTabStyle;\n        }\n        if (typeof name === \"string\") {\n            return (\n                <Button style={{ flex: 1 }} key={name} onPress={() => onPressHandler(page)}>\n                    <TabHeading style={currTabStyle} active={isTabActive}>\n                        <Text style={currTextStyle}>{name}</Text>\n                    </TabHeading>\n                </Button>\n            );\n        } else {\n            return (\n                <Button style={{ flex: 1 }} key={_.random(1.2, 5.2)} onPress={() => onPressHandler(page)}>\n                    <TabHeading style={tabHeaderStyle} active={isTabActive}>\n                        {headerContent}\n                    </TabHeading>\n                </Button>\n            );\n        }\n    }\n\n    render() {\n        const variables = this.context.theme\n            ? this.context.theme[\"@@shoutem.theme/themeStyle\"].variables\n            : variable;\n        const platformStyle = variables.platformStyle;\n        const containerWidth = this.props.containerWidth;\n        const numberOfTabs = this.props.tabs.length;\n        const tabUnderlineStyle = {\n            position: \"absolute\",\n            width: containerWidth / numberOfTabs,\n            height: 4,\n            backgroundColor: variables.topTabBarActiveBorderColor,\n            bottom: 0,\n        };\n        const left = this.props.scrollValue.interpolate({\n            inputRange: [0, 1],\n            outputRange: [0, containerWidth / numberOfTabs],\n        });\n        return (\n            <TabContainer style={this.props.tabContainerStyle ? this.props.tabContainerStyle : {}}>\n                {this.props.tabs.map((name, page) => {\n\n                    const isTabActive = this.props.activeTab === page;\n                    if (!this.props.renderTab) {\n                        return this.renderTab(\n                            name,\n                            page,\n                            isTabActive,\n                            this.props.goToPage,\n                            this.props.tabStyle[page],\n                            this.props.activeTabStyle[page],\n                            this.props.textStyle[page],\n                            this.props.activeTextStyle[page],\n                            this.props.tabHeaderStyle[page]\n                        );\n                    }\n                    else {\n                        return this.props.renderTab(\n                            name,\n                            page,\n                            isTabActive,\n                            this.props.goToPage,\n                            this.props.tabStyle[page],\n                            this.props.activeTabStyle[page],\n                            this.props.textStyle[page],\n                            this.props.activeTextStyle[page],\n                            this.props.tabHeaderStyle[page]);\n                    }\n                })}\n                <Animated.View style={[tabUnderlineStyle, { left }, this.props.underlineStyle]} />\n            </TabContainer>\n        );\n    }\n\n}\n\n// module.exports = DefaultTabBar;\nconst StyledTab = connectStyle(\"NativeBase.DefaultTabBar\", {}, mapPropsToStyleNames)(DefaultTabBar);\nexport { StyledTab as DefaultTabBar };"]}